<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.lgq.mm.dao.BillMapper">

  <sql id="columns">
        id, master_id, member_id, trans_type, amount, process_flag, create_time, creator_id
    </sql>

  <select id="getBill" resultType="Bill">
    select
    <include refid="columns"/>
    from bill where id = #{id}
  </select>

  <select id="findBills" resultType="Bill">
    select
    <include refid="columns"/>
    from bill
    <where>
      <if test="masterId != null">master_id = #{masterId}</if>
      <if test="memberId != null">and member_id = #{memberId}</if>
      <if test="transType != null">and trans_type = #{transType}</if>
      <if test="createTimeStart != null">and create_time >= #{createTimeStart}</if>
      <if test="createTimeEnd != null">and create_time &lt;= #{createTimeEnd}</if>
    </where>
    <if test="offset != null and limit != null">
      order by id desc limit #{offset}, #{limit}
    </if>
  </select>

  <select id="countBills" resultType="int">
    select count(*) from bill
    <where>
      <if test="masterId != null">master_id = #{masterId}</if>
      <if test="memberId != null">and member_id = #{memberId}</if>
      <if test="transType != null">and trans_type = #{transType}</if>
      <if test="createTimeStart != null">and create_time >= #{createTimeStart}</if>
      <if test="createTimeEnd != null">and create_time &lt;= #{createTimeEnd}</if>
    </where>
  </select>

  <insert id="addBill" useGeneratedKeys="true" keyProperty="id">
    insert into bill(<include refid="columns"/>) values (
    default,
    <choose>
      <when test="masterId == null">0,</when>
      <otherwise>#{masterId},</otherwise>
    </choose>
    #{memberId}, #{transType}, #{amount}, #{processFlag}, now(), #{creatorId}
    );
    <if test="masterId == null">
      update bill set master_id = LAST_INSERT_ID() where id = LAST_INSERT_ID();
    </if>
  </insert>

  <select id="findNeedProcessConsumeAmount" resultType="Bill">
    select
      member_id,
      4 as trans_type,
      sum(case when trans_type = 4 then amount when trans_type = 5 then amount * -1 end) as amount
    from bill
    where create_time >= #{createTimeStart} and create_time &lt; #{createTimeEnd}
      and process_flag is null and trans_type in (4, 5)
    group by member_id
  </select>
  
  <update id="updateConsumePayBillProcessFinish">
    update bill set process_flag = 1
    where create_time >= #{createTimeStart} and create_time &lt; #{createTimeEnd}
      and process_flag is null and trans_type in (4, 5)
  </update>

</mapper>